name: Web Components Tests > Lazy loading without preload works
steps:
  - step: I have the environment variable "PAGEFIND_SITE" set to "public"
  - step: I have a "public/index.html" file with the content {html}
    html: |-
      <!DOCTYPE html><html lang="en"><head>
      <link href="/pagefind/pagefind-modular-ui.css" rel="stylesheet">
      </head><body>
      <!-- No preload - should lazy load on interaction -->
      <pagefind-input placeholder="Search..."></pagefind-input>
      <pagefind-summary></pagefind-summary>
      <pagefind-results></pagefind-results>
      <script src="/pagefind/pagefind-web-components.js" type="module"></script>
      </body></html>
  - step: I have a "public/cat/index.html" file with the content {html}
    html: >-
      <!DOCTYPE html><html
      lang="en"><head></head><body><h1>Cat Page</h1><p>This page is about
      cats.</p></body></html>
  - step: I have a "public/dog/index.html" file with the content {html}
    html: >-
      <!DOCTYPE html><html
      lang="en"><head></head><body><h1>Dog Page</h1><p>This page is about
      dogs.</p></body></html>
  - macro: I run Pagefind
  - step: stdout should contain "Running Pagefind"
  - step: The file "public/pagefind/pagefind.js" should not be empty
  - step: I serve the directory "public"
  - step: In my browser, I load "/"
  # Wait for page to load, then verify input exists
  - step: In my browser, I evaluate {js}
    js: |-
      let input = await toolproof.querySelector("pagefind-input input");
      toolproof.assert(input !== null, "Input should be rendered");
  # Click and type in the input - this should trigger lazy loading
  - step: In my browser, I click the selector "pagefind-input input"
  - step: In my browser, I type "cat"
  - step: In my browser, the console should be empty
  # Verify that search results appear (instance was created and all components connected)
  - step: In my browser, I evaluate {js}
    js: |-
      let summary = await toolproof.querySelector("pagefind-summary");
      await toolproof.waitFor(() => summary.textContent.includes("1") && summary.textContent.includes("cat"));
      toolproof.assert(summary.textContent.includes("1"));
      toolproof.assert(summary.textContent.includes("cat"));
  - step: In my browser, I evaluate {js}
    js: |-
      let results = await toolproof.querySelector("pagefind-results ul");
      // Wait for result to load (not just placeholder)
      await toolproof.waitFor(() => {
        let link = results.querySelector("a");
        return link && link.textContent.includes("Cat Page");
      });
      let items = results.querySelectorAll("li");
      toolproof.assert(items.length === 1, `Expected 1 result, got ${items.length}`);
